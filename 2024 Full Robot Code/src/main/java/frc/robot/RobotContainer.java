/* Copyright (c) FIRST and other WPILib contributors.// Open Source Software; you can modify and/or share it under the terms of// the WPILib BSD license file in the root directory of this project.*/package frc.robot;import edu.wpi.first.wpilibj2.command.Command;import edu.wpi.first.wpilibj2.command.InstantCommand;import edu.wpi.first.wpilibj2.command.button.CommandJoystick;import edu.wpi.first.wpilibj2.command.button.CommandXboxController;import edu.wpi.first.wpilibj2.command.button.Trigger;import frc.robot.Constants.FieldConstants;import frc.robot.auto.AutoModeSelector;import frc.robot.commands.AimAndShoot;import frc.robot.commands.AmpScore;import frc.robot.commands.AngleAndShoot;import frc.robot.commands.Intake;import frc.robot.commands.IntakeOverride;import frc.robot.commands.MeasureWheelDiameter;import frc.robot.commands.ReverseIntake;import frc.robot.commands.TeleopSwerve;import frc.robot.subsystems.ArmSubsystem;import frc.robot.subsystems.ClimberSubsytem;import frc.robot.subsystems.IntakeSubsystem;import frc.robot.subsystems.LEDController;import frc.robot.subsystems.ShooterSubsystem;import frc.robot.subsystems.SwerveSubsystem;import edu.wpi.first.math.geometry.Pose2d;import edu.wpi.first.wpilibj.Joystick;import edu.wpi.first.wpilibj.XboxController;import edu.wpi.first.wpilibj.XboxController.Axis;import edu.wpi.first.wpilibj.XboxController.Button;import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;public class RobotContainer{private final CommandXboxController driveController=new CommandXboxController(0);private final CommandXboxController helmsController=new CommandXboxController(1);private final CommandJoystick buttonBox=new CommandJoystick(2);private final Joystick buttonHID=buttonBox.getHID();private final int translationAxis=XboxController.Axis.kLeftY.value;private final int strafeAxis=XboxController.Axis.kLeftX.value;private final int rotationAxis=XboxController.Axis.kRightX.value;private final Trigger robotCentric= new Trigger(driveController.leftBumper());private Trigger shoot=helmsController.axisGreaterThan(Axis.kLeftTrigger.value,0.1);private final SwerveSubsystem m_drive=new SwerveSubsystem();private final ArmSubsystem m_arm=new ArmSubsystem();private final IntakeSubsystem m_intake=new IntakeSubsystem();private final ShooterSubsystem m_shooter=new ShooterSubsystem();private final ClimberSubsytem m_climber=new ClimberSubsytem();private final LEDController m_leds=new LEDController();private final AutoModeSelector m_autoModeSelector=new AutoModeSelector(m_arm,m_shooter,m_intake,m_drive);public RobotContainer(){SmartDashboard.putData("set to midfield",m_drive.resetOdometryCommand(FieldConstants.FIELD_LENGTH/ 2,FieldConstants.FIELD_WIDTH/2));SmartDashboard.putData("set to subwoofer",m_drive.resetOdometryCommand(1.34,5.54));SmartDashboard.putData("test wheel diameter",new MeasureWheelDiameter(m_drive));m_shooter.setDefaultCommand(m_shooter.defaultShooterCommand(shoot,()-> m_drive.isInSpinUpRange()));m_climber.setDefaultCommand(m_climber.climb(()-> buttonHID.getRawButton(4),()-> buttonHID.getRawButton(5),()-> buttonHID.getRawButton(9),()-> buttonHID.getRawButton(10)));m_drive.setDefaultCommand(new TeleopSwerve(m_drive,()-> -getSpeedMultiplier()* driveController.getRawAxis(translationAxis),()-> -getSpeedMultiplier()* driveController.getRawAxis(strafeAxis),()-> -driveController.getRawAxis(rotationAxis),()-> robotCentric.getAsBoolean(),()-> driveController.getRightTriggerAxis()>0.1,()-> driveController.getHID().getRawButton(Button.kX.value)));configureBindings();m_drive.resetOdometry(new Pose2d());m_autoModeSelector.showOptions();}private void configureBindings(){driveController.button(Button.kY.value).onTrue(new InstantCommand(()-> m_drive.zeroGyro(),m_drive));helmsController.button(Button.kRightBumper.value).whileTrue(new AmpScore(m_arm,m_shooter,shoot));helmsController.axisGreaterThan(Axis.kLeftY.value,0.5).whileTrue(m_arm.changeArmSetpointCommand(-2).repeatedly());helmsController.axisLessThan(Axis.kLeftY.value,-0.5).whileTrue(m_arm.changeArmSetpointCommand(2).repeatedly());helmsController.axisGreaterThan(Axis.kRightTrigger.value,0.1).whileTrue(new AimAndShoot(m_arm,m_shooter,()-> m_drive.getRelativeSpeakerLocation().getNorm(),()-> helmsController.getLeftTriggerAxis()>0.1));helmsController.button(Button.kX.value).whileTrue(new AngleAndShoot(m_arm,m_shooter,()-> 25,shoot));helmsController.button(Button.kY.value).whileTrue(new AngleAndShoot(m_arm,m_shooter,()-> 47,shoot));helmsController.button(Button.kB.value).whileTrue(new AngleAndShoot(m_arm,m_shooter,()-> 69.3,shoot));helmsController.axisGreaterThan(Axis.kRightY.value,0.5).whileTrue(new Intake(m_intake,m_arm,m_shooter));helmsController.axisLessThan(Axis.kRightY.value,-0.5).whileTrue(new ReverseIntake(m_intake,m_shooter));helmsController.button(Button.kA.value).whileTrue(new IntakeOverride(m_intake,m_arm,m_shooter));}private double getSpeedMultiplier(){return driveController.getHID().getRawButton(Button.kLeftStick.value)? 0.7:1;}public void disabledPeriodic(){m_leds.disabledPeriodic();}public void autoPeriodic(){m_leds.autoPeriodic(m_shooter.isNoteInShooter());}public void teleopPeriodic(){m_leds.teleopPeriodic(m_shooter.isNoteInShooter(),m_drive.isInRange(),m_shooter.isAtShootingSpeed(),m_arm.getArmPosition()>23);}public void teleopInit(){m_arm.setToHandoffAngle();}public Command getAutonomousCommand(){return m_autoModeSelector.getSelectedAuto();}}