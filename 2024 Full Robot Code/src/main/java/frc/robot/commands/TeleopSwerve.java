/* Copyright (c) FIRST and other WPILib contributors.// Open Source Software; you can modify and/or share it under the terms of// the WPILib BSD license file in the root directory of this project.*/package frc.robot.commands;import java.util.function.BooleanSupplier;import java.util.function.DoubleSupplier;import edu.wpi.first.math.MathUtil;import edu.wpi.first.math.controller.PIDController;import edu.wpi.first.math.controller.ProfiledPIDController;import edu.wpi.first.math.filter.SlewRateLimiter;import edu.wpi.first.math.geometry.Translation2d;import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;import edu.wpi.first.wpilibj2.command.Command;import frc.lib.OnboardModuleState;import frc.robot.Constants.AutoConstants;import frc.robot.Constants.FieldConstants;import frc.robot.Constants.SwerveConstants;import frc.robot.subsystems.SwerveSubsystem;public class TeleopSwerve extends Command{private SwerveSubsystem m_SwerveSubsystem;private DoubleSupplier m_xSupplier,m_ySupplier,m_rotationSupplier;private BooleanSupplier m_robotCentricSupplier,m_isSpeakerScoringSupplier,m_isAmpScoringSupplier;private PIDController angleController=new PIDController(0.15,0,0);private SlewRateLimiter xLimiter=new SlewRateLimiter(3.0);private SlewRateLimiter yLimiter=new SlewRateLimiter(3.0);private SlewRateLimiter rotationLimiter=new SlewRateLimiter(3.0);public TeleopSwerve(SwerveSubsystem SwerveSubsystem,DoubleSupplier xSupplier,DoubleSupplier ySupplier,DoubleSupplier rotationSupplier,BooleanSupplier robotCentricSupplier,BooleanSupplier isSpeakerScoringSupplier,BooleanSupplier isAmpScoringSupplier){this.m_SwerveSubsystem=SwerveSubsystem;addRequirements(m_SwerveSubsystem);this.m_xSupplier=xSupplier;this.m_ySupplier=ySupplier;this.m_rotationSupplier=rotationSupplier;this.m_robotCentricSupplier=robotCentricSupplier;this.m_isSpeakerScoringSupplier=isSpeakerScoringSupplier;this.m_isAmpScoringSupplier=isAmpScoringSupplier;}@Override public void execute(){int invert=FieldConstants.isRedAlliance()? -1:1;double xVal=invert * xLimiter.calculate(MathUtil.applyDeadband(m_xSupplier.getAsDouble(),SwerveConstants.inputDeadband));double yVal=invert * yLimiter.calculate(MathUtil.applyDeadband(m_ySupplier.getAsDouble(),SwerveConstants.inputDeadband));double rotationVal= rotationLimiter.calculate(MathUtil.applyDeadband(m_rotationSupplier.getAsDouble(),SwerveConstants.inputDeadband));boolean isFieldOriented=!m_robotCentricSupplier.getAsBoolean();boolean isSpeakerScoring=m_isSpeakerScoringSupplier.getAsBoolean();boolean isAmpScoring=m_isAmpScoringSupplier.getAsBoolean();double currentDirection=m_SwerveSubsystem.getPose().getRotation().getDegrees();Translation2d relativeTargetPosition=m_SwerveSubsystem.getRelativeSpeakerLocation();double targetDirection=OnboardModuleState.closestAngle(currentDirection,relativeTargetPosition.getAngle().getDegrees()+180);SmartDashboard.putNumber("Speaker Direction",targetDirection);SmartDashboard.putNumber("Speaker Distance",relativeTargetPosition.getNorm());SmartDashboard.putBoolean("Is speaker scoring",isSpeakerScoring);if(isSpeakerScoring){double rSpeed=angleController.calculate(currentDirection,targetDirection);m_SwerveSubsystem.drive(xVal * SwerveConstants.maxSpeed,yVal * SwerveConstants.maxSpeed,rSpeed,isFieldOriented);}if(isAmpScoring){double rSpeed=angleController.calculate(currentDirection,OnboardModuleState.closestAngle(currentDirection,-90));m_SwerveSubsystem.drive(xVal * SwerveConstants.maxSpeed,yVal * SwerveConstants.maxSpeed,rSpeed,isFieldOriented);}else{m_SwerveSubsystem.drive(xVal * SwerveConstants.maxSpeed,yVal * SwerveConstants.maxSpeed,rotationVal * SwerveConstants.maxAngularVelocity,isFieldOriented);}}}