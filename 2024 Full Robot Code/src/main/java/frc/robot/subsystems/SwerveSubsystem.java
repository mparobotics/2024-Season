/* Copyright (c) FIRST and other WPILib contributors.// Open Source Software; you can modify and/or share it under the terms of// the WPILib BSD license file in the root directory of this project.*/package frc.robot.subsystems;import com.ctre.phoenix6.configs.Pigeon2Configuration;import com.ctre.phoenix6.hardware.Pigeon2;import com.pathplanner.lib.auto.AutoBuilder;import com.pathplanner.lib.path.GoalEndState;import com.pathplanner.lib.path.PathConstraints;import com.pathplanner.lib.path.PathPlannerPath;import edu.wpi.first.math.estimator.SwerveDrivePoseEstimator;import edu.wpi.first.math.geometry.Pose2d;import edu.wpi.first.math.geometry.Rotation2d;import edu.wpi.first.math.geometry.Translation2d;import edu.wpi.first.math.kinematics.ChassisSpeeds;import edu.wpi.first.math.kinematics.SwerveDriveKinematics;import edu.wpi.first.math.kinematics.SwerveModulePosition;import edu.wpi.first.math.kinematics.SwerveModuleState;import edu.wpi.first.math.util.Units;import edu.wpi.first.wpilibj.DriverStation;import edu.wpi.first.wpilibj.DriverStation.Alliance;import edu.wpi.first.wpilibj.smartdashboard.Field2d;import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;import edu.wpi.first.wpilibj2.command.Command;import edu.wpi.first.wpilibj2.command.SubsystemBase;import frc.lib.LimelightHelpers;import frc.robot.Constants.ArmConstants;import frc.robot.Constants.AutoConstants;import frc.robot.Constants.FieldConstants;import frc.robot.Constants.ShooterConstants;import frc.robot.Constants.SwerveConstants;public class SwerveSubsystem extends SubsystemBase{private final Pigeon2 pigeon;private SwerveDrivePoseEstimator odometry;private SwerveModule[]swerveModules;private Field2d field;public SwerveSubsystem(){pigeon=new Pigeon2(SwerveConstants.PIGEON_ID);pigeon.getConfigurator().apply(new Pigeon2Configuration());zeroGyro();configPathPlanner();swerveModules= new SwerveModule[]{new SwerveModule(0,SwerveConstants.Mod0.constants),new SwerveModule(1,SwerveConstants.Mod1.constants),new SwerveModule(2,SwerveConstants.Mod2.constants),new SwerveModule(3,SwerveConstants.Mod3.constants)};odometry=new SwerveDrivePoseEstimator(SwerveConstants.swerveKinematics,getYaw(),getPositions(),new Pose2d(0,0,Rotation2d.fromDegrees(0)));field=new Field2d();SmartDashboard.putData("Field",field);}public void drive(double x,double y,double rotation,boolean isFieldRelative){driveFromChassisSpeeds(isFieldRelative ?ChassisSpeeds.fromFieldRelativeSpeeds(x,y,rotation,getYaw()):new ChassisSpeeds(x,y,rotation),true);}public void closedLoopDrive(ChassisSpeeds speeds){driveFromChassisSpeeds(speeds,false);}public void driveFromChassisSpeeds(ChassisSpeeds speeds,boolean isOpenLoop){SwerveModuleState[]swerveModuleStates=SwerveConstants.swerveKinematics.toSwerveModuleStates(speeds);SwerveDriveKinematics.desaturateWheelSpeeds(swerveModuleStates,SwerveConstants.maxSpeed);for(SwerveModule module:swerveModules){module.setDesiredState(swerveModuleStates[module.moduleNumber],isOpenLoop);}}public void resetOdometry(Pose2d pose){odometry.resetPosition(getYaw(),getPositions(),pose);}public void zeroGyro(){if(FieldConstants.isRedAlliance()){pigeon.setYaw(180);}else{pigeon.setYaw(0);}}public Pose2d getPose(){return odometry.getEstimatedPosition();}private SwerveModulePosition[]getPositions(){SwerveModulePosition[]positions=new SwerveModulePosition[4];for(SwerveModule module:swerveModules){positions[module.moduleNumber]=module.getPosition();}return positions;}private SwerveModuleState[]getStates(){SwerveModuleState[]states=new SwerveModuleState[4];for(SwerveModule module:swerveModules){states[module.moduleNumber]=module.getState();}return states;}public double[]getEncoderRotations(){double[]distances=new double[4];for(SwerveModule module:swerveModules){distances[module.moduleNumber]=module.getRawDriveEncoder()/SwerveConstants.wheelCircumference;}return distances;}public ChassisSpeeds getRobotRelativeSpeed(){SwerveModuleState[]states=getStates();return SwerveConstants.swerveKinematics.toChassisSpeeds(states[0],states[1],states[2],states[3]);}public double getYawAsDouble(){double yaw=pigeon.getAngle();return(SwerveConstants.invertPigeon)?360 - yaw :yaw;}public Rotation2d getYaw(){return Rotation2d.fromDegrees(getYawAsDouble());}public Translation2d getRelativeSpeakerLocation(){Translation2d targetLocation=FieldConstants.isRedAlliance()? FieldConstants.RED_SPEAKER_LOCATION:FieldConstants.BLUE_SPEAKER_LOCATION;return targetLocation.minus(getPose().getTranslation());}public boolean isInRange(){return getRelativeSpeakerLocation().getNorm()<ArmConstants.maxShootingDistance;}public boolean isInSpinUpRange(){return getRelativeSpeakerLocation().getNorm()<ArmConstants.maxShootingDistance+2;}public Translation2d getVirtualTarget(){Translation2d speakerLocation=getRelativeSpeakerLocation();double estimatedShotAngle=Units.degreesToRadians(ArmConstants.ArmAngleMap.get(speakerLocation.getNorm())+ShooterConstants.relativeShooterAngle);double noteSpeed=ShooterConstants.noteSpeedMetersPerSecond * -Math.cos(estimatedShotAngle);ChassisSpeeds chassisSpeeds=ChassisSpeeds.fromRobotRelativeSpeeds(getRobotRelativeSpeed(),getYaw());Translation2d velocity=new Translation2d(chassisSpeeds.vxMetersPerSecond,chassisSpeeds.vyMetersPerSecond);SmartDashboard.putNumber("X velocity",velocity.getX());SmartDashboard.putNumber("Y velocity",velocity.getY());Translation2d rotatedVelocity=velocity.rotateBy(speakerLocation.getAngle().times(-1));double shootDirection=Math.asin(-rotatedVelocity.getY()/noteSpeed);Translation2d relativeNoteVelocity=new Translation2d(noteSpeed,new Rotation2d(shootDirection));double timeToSpeaker=speakerLocation.getNorm()/(relativeNoteVelocity.getX()+rotatedVelocity.getX());return speakerLocation.minus(velocity.times(timeToSpeaker));}public void configPathPlanner(){AutoBuilder.configureHolonomic(this::getPose,this::resetOdometry,this::getRobotRelativeSpeed,this::closedLoopDrive,AutoConstants.pathConfig,()->(DriverStation.getAlliance().get()== Alliance.Red),this);}public Command followPathFromFile(String filename){return AutoBuilder.followPath(PathPlannerPath.fromPathFile(filename));}public Command followChoreoFile(String filename){return AutoBuilder.followPath(PathPlannerPath.fromChoreoTrajectory(filename));}public Command backupCommand(){return runOnce(()->{Pose2d currentPose;Pose2d targetPose;if(FieldConstants.isRedAlliance()){currentPose=new Pose2d(getPose().getTranslation(),Rotation2d.fromDegrees(180));}else{currentPose=new Pose2d(getPose().getTranslation(),Rotation2d.fromDegrees(0));}targetPose=FieldConstants.flipPoseForAlliance(new Pose2d(2.5,currentPose.getY(),Rotation2d.fromDegrees(0)));PathPlannerPath path=new PathPlannerPath(PathPlannerPath.bezierFromPoses(currentPose,targetPose),new PathConstraints(3,3,0,0),new GoalEndState(0,getYaw()));path.preventFlipping=true;AutoBuilder.followPath(path).schedule();});}public Command startAutoAt(double x,double y,double direction){return runOnce(()->{Pose2d startPose=FieldConstants.flipPoseForAlliance(new Pose2d(x,y,Rotation2d.fromDegrees(direction)));pigeon.setYaw(startPose.getRotation().getDegrees());odometry.resetPosition(startPose.getRotation(),getPositions(),startPose);});}public Command resetOdometryCommand(double x,double y){return runOnce(()->{Pose2d setPose=new Pose2d(FieldConstants.flipTranslationForAlliance(new Translation2d(x,y)),getYaw());resetOdometry(setPose);});}public boolean isEstimateValid(LimelightHelpers.PoseEstimate estimate){if(estimate==null){return false;}boolean isInField=estimate.pose.getX()>0&&estimate.pose.getX()<FieldConstants.FIELD_LENGTH &&estimate.pose.getY()>0&&estimate.pose.getY()<FieldConstants.FIELD_WIDTH;boolean isCloseEnough=estimate.avgTagDist<5;boolean canSeeTag=estimate.tagCount>0;return canSeeTag&&isInField&&isCloseEnough;}private boolean isOdometryValid(){for(SwerveModule module:swerveModules){if(!module.isEncoderDataValid()){return false;}}return true;}private void keepOdometryOnField(){Pose2d pose=getPose();double x=pose.getX();double y=pose.getY();Rotation2d heading=pose.getRotation();boolean isInField=true;if(x<0){x=0;isInField=false;}if(y<0){y=0;isInField=false;}if(x>FieldConstants.FIELD_LENGTH){x=FieldConstants.FIELD_LENGTH;isInField=false;}if(y>FieldConstants.FIELD_WIDTH){y=FieldConstants.FIELD_WIDTH;isInField=false;}if(!isInField){odometry.resetPosition(getYaw(),getPositions(),new Pose2d(x,y,heading));}}@Override public void periodic(){SmartDashboard.putBoolean("Is Odometry Good",isOdometryValid());if(isOdometryValid()){odometry.update(getYaw(),getPositions());}LimelightHelpers.PoseEstimate estimateA=LimelightHelpers.getBotPoseEstimate_wpiBlue("limelight-a");LimelightHelpers.PoseEstimate estimateB=LimelightHelpers.getBotPoseEstimate_wpiBlue("limelight-b");boolean AisValid=isEstimateValid(estimateA);boolean BisValid=isEstimateValid(estimateB);SmartDashboard.putBoolean("limelight A is valid" ,AisValid);SmartDashboard.putBoolean("limelight B is valid" ,BisValid);SmartDashboard.putNumber("ll-A tagCount",estimateA.tagCount);SmartDashboard.putNumber("ll-B tagCount",estimateB.tagCount);if(estimateA.tagCount==1&&estimateB.tagCount==1&&AisValid&&BisValid){odometry.addVisionMeasurement(estimateA.pose,estimateA.timestampSeconds);odometry.addVisionMeasurement(estimateB.pose,estimateB.timestampSeconds);}else{if(AisValid){if(estimateA.tagCount>=2){odometry.addVisionMeasurement(estimateA.pose,estimateA.timestampSeconds);}}else if(BisValid){if(estimateB.tagCount>=2){odometry.addVisionMeasurement(estimateB.pose,estimateB.timestampSeconds);}}}keepOdometryOnField();field.setRobotPose(getPose());field.getObject("Speaker Target").setPose(new Pose2d(getPose().getTranslation().plus(getVirtualTarget()),Rotation2d.fromDegrees(0)));SmartDashboard.putNumber("Pigeon Direction",getYawAsDouble());SmartDashboard.putNumber("position-X",getPose().getX());SmartDashboard.putNumber("position-Y",getPose().getY());}}