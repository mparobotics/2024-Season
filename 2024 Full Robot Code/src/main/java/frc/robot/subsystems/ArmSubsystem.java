/* Copyright (c) FIRST and other WPILib contributors.// Open Source Software; you can modify and/or share it under the terms of// the WPILib BSD license file in the root directory of this project.*/package frc.robot.subsystems;import java.util.function.DoubleSupplier;import com.ctre.phoenix6.configs.TalonFXConfiguration;import com.ctre.phoenix6.controls.Follower;import com.ctre.phoenix6.hardware.TalonFX;import edu.wpi.first.math.controller.PIDController;import edu.wpi.first.wpilibj.DutyCycleEncoder;import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;import edu.wpi.first.wpilibj2.command.Command;import edu.wpi.first.wpilibj2.command.SubsystemBase;import frc.robot.Constants.ArmConstants;public class ArmSubsystem extends SubsystemBase{private final TalonFX motorR=new TalonFX(ArmConstants.RmotorID);private final TalonFX motorL=new TalonFX(ArmConstants.LmotorID);private final TalonFXConfiguration motorConfig= new TalonFXConfiguration();private final DutyCycleEncoder armEncoder=new DutyCycleEncoder(ArmConstants.encoderPort);private PIDController armPID=new PIDController(ArmConstants.kP,ArmConstants.kI,ArmConstants.kD);private double m_setpoint=20;public ArmSubsystem(){setTarget(getArmPosition());motorConfig.CurrentLimits.StatorCurrentLimit=50;motorConfig.CurrentLimits.StatorCurrentLimitEnable=true;motorL.getConfigurator().apply(motorConfig);motorR.getConfigurator().apply(motorConfig);SmartDashboard.putData("Arm to handoff",setArmSetpointCommand(ArmConstants.handoffPosition));SmartDashboard.putData("Arm to amp",setArmSetpointCommand(ArmConstants.ampPosition));motorL.setControl(new Follower(ArmConstants.RmotorID,true));SmartDashboard.putNumber("Arm Set Setpoint",m_setpoint);}public void setTarget(double degrees){m_setpoint=Math.max(Math.min(degrees,ArmConstants.maxArmPosition),ArmConstants.minArmPosition);}public void setAngleForShootingDistance(double meters){setTarget(ArmConstants.ArmAngleMap.get(meters));}public void setToAmpAngle(){setTarget(ArmConstants.ampPosition);}public void setToHandoffAngle(){setTarget(ArmConstants.handoffPosition);}public double getArmPosition(){return armEncoder.getAbsolutePosition()* 360 - 321.2+90;}public boolean isAtTarget(){return Math.abs(m_setpoint - getArmPosition())<1;}public Command setArmSetpointCommand(double setpoint){return runOnce(()->{setTarget(setpoint);});}public Command changeArmSetpointCommand(double change){return runOnce(()->{setTarget(m_setpoint+change);});}public Command armToHandoffCommand(){return runOnce(()-> setToHandoffAngle());}public Command armToAmpCommand(){return runOnce(()-> setToAmpAngle());}public Command teleopArmControlCommand(DoubleSupplier speed){return runOnce(()-> motorR.set(speed.getAsDouble()* 0.4));}public boolean isLinedUp(double distance){return Math.abs(getArmPosition()- ArmConstants.ArmAngleMap.get(distance))<1;}@Override public void periodic(){double PIDOutput=armPID.calculate(getArmPosition(),m_setpoint);SmartDashboard.putNumber("PID output",PIDOutput);motorR.set(-PIDOutput);SmartDashboard.putNumber("Arm Position",getArmPosition());SmartDashboard.putNumber("Arm Goal Position",m_setpoint);SmartDashboard.putBoolean("Is at setpoint",isAtTarget());double error=m_setpoint - getArmPosition();SmartDashboard.putNumber("Arm Error",error);}}